import cv2
import numpy as np

# Define the color ranges for HSV based on the obtained values
color_ranges = {
    'red': [(np.array([0, 100, 100]), np.array([10, 255, 255])), (np.array([160, 100, 100]), np.array([180, 255, 255]))],
    'green': [(np.array([30, 100, 50]), np.array([89, 255, 255]))],
    'white': [(np.array([0, 0, 230]), np.array([180, 25, 255]))],
    'yellow': [(np.array([20, 100, 100]), np.array([30, 255, 255]))]
}

# Background color range in HSV
background_hsv = (np.array([0, 0, 180]), np.array([180, 30, 255]))

# Quadrant boundary color range in HSV
quadrant_boundary_hsv = (np.array([160, 50, 50]), np.array([180, 255, 255]))

# Define the regions to exclude (e.g., top-left corner where quadrant numbers might appear)
exclude_regions = [
    (0, 0, 200, 200)  # Adjust coordinates as needed to exclude the area with quadrant numbers
]

# Initialize the video capture
video_path = r"C:\Users\KIIT\OneDrive\Desktop\A\AI Assignment video.mp4"  # Use raw string to avoid escape characters
cap = cv2.VideoCapture(video_path)

if not cap.isOpened():
    print(f"Error: Could not open video at {video_path}")
    exit()

# Get video properties
frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
fps = cap.get(cv2.CAP_PROP_FPS)

print(f"Video dimensions: {frame_width}x{frame_height}")
print(f"Frame rate (fps): {fps}")

# Define the codec and create VideoWriter object to save the processed video
out = cv2.VideoWriter('output.avi', cv2.VideoWriter_fourcc(*'XVID'), fps, (frame_width, frame_height))

# Function to check if a point is within any of the excluded regions
def is_in_exclude_region(x, y, exclude_regions):
    for (x1, y1, x2, y2) in exclude_regions:
        if x1 <= x and x <= x2 and y1 <= y and y <= y2:
            return True
    return False

# Entry and exit logs
entry_exit_log = []

# Read and process frames
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    hsv_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
    
    # Create masks to exclude background color and quadrant boundary color
    background_mask = cv2.inRange(hsv_frame, background_hsv[0], background_hsv[1])
    quadrant_boundary_mask = cv2.inRange(hsv_frame, quadrant_boundary_hsv[0], quadrant_boundary_hsv[1])
    exclusion_mask = cv2.bitwise_or(background_mask, quadrant_boundary_mask)
    
    for color, ranges in color_ranges.items():
        mask = np.zeros(hsv_frame.shape[:2], dtype=np.uint8)
        for lower, upper in ranges:
            mask += cv2.inRange(hsv_frame, lower, upper)

        # Subtract the exclusion mask from the color mask
        mask = cv2.bitwise_and(mask, cv2.bitwise_not(exclusion_mask))

        # Apply morphological operations to filter out noise
        kernel = np.ones((5, 5), np.uint8)
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
        mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)

        contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

        for contour in contours:
            if cv2.contourArea(contour) > 500:  # Adjust contour area threshold as needed
                x, y, w, h = cv2.boundingRect(contour)
                cx, cy = x + w // 2, y + h // 2

                if is_in_exclude_region(cx, cy, exclude_regions):
                    continue

                quadrant = None
                if cx < frame_width / 2 and cy < frame_height / 2:
                    quadrant = 1
                elif cx >= frame_width / 2 and cy < frame_height / 2:
                    quadrant = 2
                elif cx < frame_width / 2 and cy >= frame_height / 2:
                    quadrant = 3
                elif cx >= frame_width / 2 and cy >= frame_height / 2:
                    quadrant = 4

                if quadrant is not None:
                    log_entry = f"Color: {color}, Frame: {int(cap.get(cv2.CAP_PROP_POS_FRAMES))}, Quadrant: {quadrant}"
                    print(log_entry)
                    entry_exit_log.append(log_entry)

                cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                cv2.putText(frame, color, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)

    out.write(frame)

    cv2.imshow('Frame', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
out.release()
cv2.destroyAllWindows()

# Save the entry and exit logs to a text file
with open("entry_exit_log.txt", "w") as log_file:
    for log_entry in entry_exit_log:
        log_file.write(log_entry + "\n")

print("Processing complete.")
